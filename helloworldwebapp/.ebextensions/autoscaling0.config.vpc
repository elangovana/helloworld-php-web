Resources:
  PubPrivateVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 172.31.0.0/16
      Tags:
        - Key: Name
          Value:
            Join: [_, ['DemoWebApp']]
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: PubPrivateVPC
      AvailabilityZone:
        Fn::Select:
         - 0
         - Fn::GetAZs: ""
      CidrBlock: 172.31.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Join: [_, ['DemoWebApp',Public]]
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
         - 1
         - Fn::GetAZs: ""
      VpcId:
        Ref: PubPrivateVPC
      CidrBlock: 172.31.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Join: [_, ['DemoWebApp',Public]]
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: PubPrivateVPC
      AvailabilityZone:
        Fn::Select:
         - 0
         - Fn::GetAZs: ""
      CidrBlock: 172.31.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value:
            Join: [_, ['DemoWebApp',Private]]
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: PubPrivateVPC
      AvailabilityZone:
        Fn::Select:
         - 1
         - Fn::GetAZs: ""
      CidrBlock: 172.31.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value:
            Join: [_, ['DemoWebApp',Private]]
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value:
            Join: [_, ['DemoWebApp']]
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId:
        Ref: PubPrivateVPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: PubPrivateVPC
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable
  NatGateway:
    Type: "AWS::EC2::NatGateway"
    DependsOn: NatPublicIP
    Properties:
      AllocationId:
        GetAtt: NatPublicIP.AllocationId
      SubnetId:
        Ref: PublicSubnet1
  NatPublicIP:
    Type: "AWS::EC2::EIP"
    DependsOn: PubPrivateVPC
    Properties:
      Domain: vpc
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: PubPrivateVPC
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable
Outputs:
  PubPrivateVPCID:
    Description: VPC ID
    Value:
      Ref: "PubPrivateVPC"
    Export:
      Name: BeanstalkVPCID
  PrivateSubnet1ID:
    Description: Private Subnet A ID
    Value:
      Ref: "PrivateSubnet1"
    Export:
      Name: BeanstalkPrivateSubnet1ID
  PrivateSubnet2ID:
    Description: Private Subnet B ID
    Value:
      Ref: "PrivateSubnet2"
    Export:
      Name: BeanstalkPrivateSubnet2ID
  PublicSubnet1ID:
    Description: Public Subnet A ID
    Value:
      Ref: "PublicSubnet1"
    Export:
      Name: BeanstalkPublicSubnet1ID
  PublicSubnet2ID:
    Description: Public Subnet B ID
    Value:
      Ref: "PublicSubnet2"
    Export:
      Name: BeanstalkPublicSubnet2ID

option_settings:
  aws:autoscaling:launchconfiguration:
    IamInstanceProfile: aws-elasticbeanstalk-ec2-role
    InstanceType: t2.micro
    EC2KeyName: beanstalk
  aws:autoscaling:asg:
    Availability Zones: Any
    Cooldown: '720'
    MaxSize: '3'
    MinSize: '2'
  aws:autoscaling:trigger:
    LowerBreachScaleIncrement: '-1'
    UpperBreachScaleIncrement: '1'
    UpperThreshold: '4'
    BreachDuration: '5'
    EvaluationPeriods: '1'
    LowerThreshold: '1'
    MeasureName: Latency
    Period: '5'
    Statistic: Average
    Unit: Seconds
  aws:ec2:vpc:
    VPCId:'`{ "Ref" : "PubPrivateVPC" }`'
    AssociatePublicIpAddress: 'false'
    ELBScheme: public
    ELBSubnets:  '`{  "Ref" : "PublicSubnet1" }`', '`{  "Ref" : "PublicSubnet2" }`'
    Subnets:'`{  "Ref" : "PrivateSubnet2" }`', '`{  "Ref" : "PrivateSubnet1" }`'
